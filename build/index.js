!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t.w={},t(t.s="./src/index.js")}({"./src/index.js":function(module,exports,__webpack_require__){eval("const { Router } = __webpack_require__(/*! express */ \"express\")\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\")\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\")\nconst chalk = __webpack_require__(/*! chalk */ \"chalk\")\n\nclass RouteGenerator {\n  constructor(options) {\n    this.options = options\n    this.generatedRoutes = Router()\n    this.instantiate()\n  }\n\n  instantiate() {\n    try {\n      if (this.appInstanceIsPresent() && this.routesArePresent()) {\n        this.setDefaults()\n\n        this.options.routes.forEach(route => this.createRoute(route))\n      }\n    } catch (error) {\n      this.errorHandler(error)\n    }\n  }\n\n  uriPathIsPresent(route) {\n    if (!route.uri) {\n      throw ('Your route needs a uri')\n    }\n\n    return true\n  }\n\n  routeModelIsPresent(route) {\n    if (!route.model) {\n      throw ('Your route needs a model')\n    }\n\n    return true\n  }\n\n  appInstanceIsPresent() {\n    if (!this.options.app || typeof this.options.app !== 'function') {\n      throw ('Your must provide an instance of your application to assign routes to')\n    }\n\n    return true\n  }\n\n  routesArePresent() {\n    if (!this.options.routes || this.options.routes.length === 0) {\n      throw ('Your must provide at least one route')\n    }\n\n    return true\n  }\n\n  setDefaults() {\n    this.options.app.use(bodyParser.json())\n    this.setBaseUri()\n  }\n\n  setBaseUri() {\n    if (this.options.baseUri) {\n      this.options.app.use(this.options.baseUri, this.generatedRoutes)\n    } else {\n      this.options.app.use('/api', this.generatedRoutes)\n    }\n  }\n\n  getHandlersForRoute(route) {\n    if (!route.handlers || route.handlers.length === 0) {\n      return []\n    }\n\n    return route.handlers\n  }\n\n  createRoute(route) {\n    try {\n      if (this.uriPathIsPresent(route) && this.routeModelIsPresent(route)) {\n        if (route.methods && route.methods.length === 0 || !route.methods) {\n          this.buildGetRoute('get', route)\n        } else {\n          route.methods.forEach(method => {\n            switch (method) {\n              case 'post':\n                this.buildPostRoute(method, route)\n                break\n              case 'get':\n                this.buildGetRoute(method, route)\n                break\n              case 'put':\n                this.buildPutRoute(method, route)\n                break\n              case 'delete':\n                this.buildDeleteRoute(method, route)\n                break\n            }\n          })\n        }\n      }\n    } catch (error) {\n      this.errorHandler(error)\n    }\n  }\n\n  buildPostRoute(method, route) {\n    this.generatedRoutes[method](route.uri, this.getHandlersForRoute(route), (req, res) => {\n      route.model.create(req.body).then(() => {\n        res.status(200).send({\n          message: 'Document created'\n        })\n      }).catch((err) => {\n        res.status(400).send({\n          message: err.message\n        })\n      })\n    })\n  }\n\n  buildGetRoute(method, route) {\n    this.generatedRoutes[method](route.uri, this.getHandlersForRoute(route), (req, res) => {\n      route.model.find({}, (err, documents) => {\n        if (err) {\n          res.status(400).send({\n            message: err.message\n          })\n        }\n\n        res.status(200).send(documents)\n      })\n    })\n\n    this.generatedRoutes[method](route.uri + '/:id', (req, res) => {\n      route.model.findById(req.params.id).then((document) => {\n        res.status(200).send(document)\n      }).catch((err) => {\n        res.status(400).send({\n          message: err.message\n        })\n      })\n    })\n  }\n\n  buildPutRoute(method, route) {\n    this.generatedRoutes[method](route.uri + '/:id', this.getHandlersForRoute(route), (req, res) => {\n      route.model.findOneAndUpdate({ _id: req.params.id }, req.body, { overwrite: true, runValidators: true }).then(() => {\n        res.status(200).send({\n          message: 'Document updated'\n        })\n      }).catch((err) => {\n        res.status(404).send({\n          message: err.message\n        })\n      })\n    })\n  }\n\n  buildDeleteRoute(method, route) {\n    this.generatedRoutes[method](route.uri + '/:id', this.getHandlersForRoute(route), (req, res) => {\n      route.model.remove({ _id: req.params.id }).then(() => {\n        res.status(200).send({\n          message: 'Document removed'\n        })\n      }).catch((err) => {\n        res.status(404).send({\n          message: err.message\n        })\n      })\n    })\n  }\n\n  errorHandler(message) {\n    console.log(chalk.blue.bold('Dynamic Route Creation Plugin Error: ') + chalk.red.bold(message))\n  }\n}\n\nmodule.exports = { RouteGenerator }\n\n\n//# sourceURL=webpack:///./src/index.js?")},"body-parser":function(module,exports){eval('module.exports = require("body-parser");\n\n//# sourceURL=webpack:///external_%22body-parser%22?')},chalk:function(module,exports){eval('module.exports = require("chalk");\n\n//# sourceURL=webpack:///external_%22chalk%22?')},express:function(module,exports){eval('module.exports = require("express");\n\n//# sourceURL=webpack:///external_%22express%22?')},mongoose:function(module,exports){eval('module.exports = require("mongoose");\n\n//# sourceURL=webpack:///external_%22mongoose%22?')}});